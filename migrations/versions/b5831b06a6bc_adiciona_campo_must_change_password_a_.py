"""Adiciona campo must_change_password a User

Revision ID: b5831b06a6bc
Revises: ced6e557a2f1
Create Date: 2025-09-12 18:25:51.176352

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine import reflection

def table_exists(table_name):
    """Verifica se uma tabela existe no banco de dados."""
    bind = op.get_bind()
    inspector = reflection.Inspector.from_engine(bind)
    return table_name in inspector.get_table_names()

# revision identifiers, used by Alembic.
revision = 'b5831b06a6bc'
down_revision = 'ced6e557a2f1'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    if not table_exists('schools'):
        op.create_table('schools',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('nome', sa.String(length=150), nullable=False),
            sa.Column('slug', sa.String(length=150), nullable=True),
            sa.Column('is_active', sa.Boolean(), nullable=False),
            sa.Column('created_at', sa.DateTime(), nullable=False),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('slug')
        )
    if not table_exists('password_reset_tokens'):
        op.create_table('password_reset_tokens',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('user_id', sa.Integer(), nullable=False),
            sa.Column('token_hash', sa.String(length=256), nullable=False),
            sa.Column('created_at', sa.DateTime(), nullable=False),
            sa.Column('expires_at', sa.DateTime(), nullable=False),
            sa.Column('used_at', sa.DateTime(), nullable=True),
            sa.Column('attempts', sa.Integer(), nullable=False),
            sa.Column('max_attempts', sa.Integer(), nullable=False),
            sa.Column('revoked', sa.Boolean(), nullable=False),
            sa.Column('created_by_admin_id', sa.Integer(), nullable=True),
            sa.ForeignKeyConstraint(['created_by_admin_id'], ['users.id'], ),
            sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
    if not table_exists('user_schools'):
        op.create_table('user_schools',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('user_id', sa.Integer(), nullable=False),
            sa.Column('school_id', sa.Integer(), nullable=False),
            sa.Column('role', sa.String(length=20), nullable=False),
            sa.Column('created_at', sa.DateTime(), nullable=False),
            sa.ForeignKeyConstraint(['school_id'], ['schools.id'], ),
            sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('user_id', 'school_id', name='uq_user_school')
        )
        
    with op.batch_alter_table('users', schema=None) as batch_op:
        # Verifica se a coluna já não existe antes de adicionar
        inspector = reflection.Inspector.from_engine(op.get_bind())
        columns = [c['name'] for c in inspector.get_columns('users')]
        if 'must_change_password' not in columns:
            batch_op.add_column(sa.Column('must_change_password', sa.Boolean(), nullable=False, server_default=sa.false()))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_column('must_change_password')

    op.drop_table('user_schools')
    op.drop_table('password_reset_tokens')
    op.drop_table('schools')
    # ### end Alembic commands ###
